//#include <opencv2/opencv.hpp>
#include "WPILib.h"

#include <thread>

#include <CameraServer.h>
#include <IterativeRobot.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/core/types.hpp>

// Include Pipeline class generated by GRIP
#include "Pipeline.h"

const int counterIterator = 2;

class IntermediateVisionRobot : public frc::SampleRobot
{
	bool hassavedframe;
	int robotCounter;
	Pipeline pipeline;

private:
	static void VisionThread() {

		// Get the USB camera from CameraServer
		// Using default cam0
		cs::UsbCamera camera = CameraServer::GetInstance()->StartAutomaticCapture();
		// Set the resolution
//		camera.SetResolution(640, 480);

		// Get a CvSink. This will capture Mats from the Camera
		cs::CvSink cvSink = CameraServer::GetInstance()->GetVideo();
		// Setup a CvSource. This will send images back to the Dashboard
		cs::CvSource outputStream = CameraServer::GetInstance()->
				PutVideo("DSFeed", 1080, 720);

		// Mats are very memory expensive. Lets reuse this Mat.
		cv::Mat mat;

		// Set up Pipeline
		Pipeline pipel;

		while (true) { 		// May need to end vision while disabled
			// Tell the CvSink to grab a frame from the camera and put it
			// in the source mat.  If there is an error notify the output.
			if (cvSink.GrabFrame(mat) == 0) {
				// Send the output the error.
				outputStream.NotifyError(cvSink.GetError());
				// skip the rest of the current iteration
				continue;
			}
			// Put a rectangle on the image
//			rectangle(mat, cv::Point(100, 100), cv::Point(400, 400),
//					cv::Scalar(255, 255, 255), 5);


			// Give the output stream a new image to display
			outputStream.PutFrame(mat);
		}
	}

public:
	void RobotInit() override {

		std::thread visionThread(VisionThread);
		visionThread.detach();

		robotCounter = 0;
	}

	void Disabled() override {
		hassavedframe = true;

		robotCounter = 0;
	}

	void OperatorControl() override {

		DriverStation::ReportError("Now in operateControl Method \n");
	}
};

START_ROBOT_CLASS(IntermediateVisionRobot)

